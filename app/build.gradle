plugins {
    id "com.android.application"
    id 'com.huawei.agconnect'
}
android {
    namespace 'com.czdxwx.wear'
    compileSdk 34
    viewBinding {
        enabled = true
    }
    defaultConfig {
        applicationId "com.czdxwx.wear"
        minSdk 29
        targetSdk 34
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        manifestPlaceholders = [
                JPUSH_PKGNAME : applicationId,
                JPUSH_APPKEY : "e2e105e9c3a59d14a00fa974", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
        ]
    }
    signingConfigs {
        config {
            // 根据您实际的签名信息，替换以下参数中的xxxx
            keyAlias 'key0'
            keyPassword '123456'
            storeFile file('C:\\Users\\12265\\Desktop\\Secrectkey\\key.jks')
            storePassword '123456'
        }
    }
    tasks.withType(JavaCompile).configureEach {
        options.fork = true
        options.forkOptions.jvmArgs += [
                '--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
                '--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
                '--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED']
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.config
        }
        release {
            signingConfig signingConfigs.config
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
}
dependencies {
    // 此处以JPush 5.0.0 版本为例，5.0.0 版本开始可以自动拉取 JCore 包，无需另外配置
    implementation libs.jpush.v540
    //若不集成厂商通道，可直接跳过以下依赖
    // 极光厂商插件版本与接入 JPush 版本保持一致，下同
    // 接入华为厂商
    implementation libs.push.v6110300
    implementation libs.huawei
    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.legacy.support.v4
    implementation libs.lifecycle.livedata.ktx
    implementation libs.lifecycle.viewmodel.ktx
    implementation libs.core.ktx
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
    implementation libs.glide.v370
    implementation libs.keyboardvisibilityevent
    implementation libs.design
    implementation libs.google.material
    implementation libs.recyclerview
    implementation libs.constraintlayout
    implementation libs.flycotablayout
    implementation libs.card.slider
    compileOnly libs.lombok.v11832
    annotationProcessor libs.lombok.v11832
    implementation libs.baserecyclerviewadapterhelper4
    implementation libs.library
    implementation libs.gson
    implementation libs.volley
    implementation libs.titlebar
    implementation  libs.refresh.layout.kernel      //核心必须依赖
    implementation  libs.refresh.header.classics    //经典刷新头
    implementation  libs.refresh.header.radar       //雷达刷新头
    implementation  libs.refresh.header.falsify     //虚拟刷新头
    implementation  libs.refresh.header.material    //谷歌刷新头
    implementation  libs.github.refresh.header.two.level   //二级刷新头
    implementation  libs.github.refresh.footer.ball        //球脉冲加载
    implementation  libs.github.refresh.footer.classics    //经典加载
    implementation libs.material.spinner
    implementation libs.getactivity.toaster
    implementation libs.mmkv
    implementation libs.cardview
    implementation libs.akexorcist.round.corner.progress.bar
    implementation libs.titlebar

}